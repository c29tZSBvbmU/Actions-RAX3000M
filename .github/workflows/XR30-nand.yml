#=================================================
# 自动构建 OpenWrt RAX3000M
# https://github.com/ytalm/OpenWrt-RAX3000M
# Description: Build OpenWrt using GitHub Actions
# Lisence: This is free software, licensed under the MIT License
# Author: flyheart
# 感谢p3terx大神的一键编译脚本
# https://github.com/P3TERX/Actions-OpenWrt
# Blog: https://p3terx.com
#=================================================
#

name: XR30-nand-hanwckf

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      Tempoary_IP:
        description: '固件 IP 地址 [可选]'
        default: ''
      EEPROM:
        description: 'Use nx30pro eeprom'
        required: false
        default: true
        type: boolean
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      APP_MTK:
        description: 'Use luci-app-mtk wifi config'
        required: true
        default: false
        type: boolean

#release发布触发开始编译(只是一个触发条件,不会发布的,又麻烦,没卵用,不用研究) 
      release:
        description: 'Release firmware'
        required: false
        default: 'false'
#编辑任意指定文件触发开始编译(去掉下面5个#开启,最下面一行是指定修改什么文件就触发编译,我现在是修改mod.config文件触发)  
  push:                               # push 操作
    branches:                         # 分支
      - master                        # 主分支

#定时触发开始编译(开启定时编译请先关闭SSH,要不然SSH没人管,会卡SSH编译失败)
  schedule:                           # 时间表
    - cron: 0 4 28 * *                 # 每月28日国际时间4点，北京时间中午12点执行(北京+8)
#          分 时 日 月 周5  
#点☆Star触发开始编译  
  watch:                              # 监视操作
    types: started                    # 点击 star 之后

### 环境变量设置

env:
  OPENWRT_NAME: hanwckf
  UPLOAD_TAG_NAME: XR30-nand
  REPO_URL: https://github.com/c29tZSBvbmU/immortalwrt-mt798x           #编译固件源码链接（请勿修改）
  REPO_BRANCH: openwrt-21.02                                #源码链接的分支（请勿修改）
  FEEDS_CONF: feeds.conf.default               
  CONFIG_FILE: XR30-nand/.config                            #配置文件（可SSH远程定制固件插件，也可在本地提取配置粘贴到此文件）
  DIY_P1_SH: XR30-nand/diy-part1.sh                            #自定义执行文件
  DIY_P2_SH: XR30-nand/diy-part2.sh                            #自定义执行文件
  EEPROM: XR30-nand/nx30pro_eeprom.bin                  #nx30pro的高功率eeprom
  UPLOAD_BIN_DIR: true                               #上传【bin文件夹】到github空间（true=开启）（false=关闭）
  UPLOAD_FIRMWARE: true                              #上传固件到github空间（true=开启）（false=关闭）
  UPLOAD_COWTRANSFER: false                          #上传固件到到【奶牛快传】（true=开启）（false=关闭）   
  UPLOAD_WETRANSFER: false                             #上传固件到到【WETRANSFER】（true=开启）（false=关闭）
  UPLOAD_RELEASE: true                              # 上传固件到 Github Releases
  DELETE_OLD_WORKFLOW: false                          # 删除早期的 workflow 任务
  DELETE_OLD_RELEASE: true                           # 删除早期的 Releases 任务
  TZ: Asia/Shanghai                                  #时区 亚洲/上海
### 结束

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name:  检验结束  Checkout                         # 1.导入主分支
      uses: actions/checkout@main

    - name: 初始化编译环境  Initialization environment                # 2.初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 清理磁盘空间(Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # when set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: false
        dotnet: false
        haskell: false
        large-packages: false
        swap-storage: false
        
    - name: 下载固件源码  Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载源  Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新源  Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装源  Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载diy.config设置  Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: 使用nx30pro的高功率eeprom
      if: github.event.inputs.EEPROM == 'true'
      run: |
        cp $EEPROM openwrt/package/mtk/drivers/mt_wifi/files/mt7981-default-eeprom/MT7981_iPAiLNA_EEPROM.bin
        cd openwrt
        ## 如果MAC没有修复则单独固定WiFi MAC
        if sed -n '/rax3000m/,/;;/p' target/linux/mediatek/mt7981/base-files/etc/board.d/02_network | grep -q 'lan_mac=$(mmc_get_mac_binary factory 0x24)'; then
        ## 创建一个辅助文件。文件内容是写入MAC地址到dat文件，固定wifi MAC地址
        echo -e "\t\tlocal wifi0_mac=\"\$(mmc_get_mac_binary factory 0x04)\"
        \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi0_mac/;b;}; \\\$aMacAddress=\$wifi0_mac\" /etc/wireless/mediatek/mt7981.dbdc.b0.dat
        \t\tlocal wifi1_mac=\"\$(macaddr_setbit_la \$wifi0_mac)\"
        \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi1_mac/;b;}; \\\$aMacAddress=\$wifi1_mac\" /etc/wireless/mediatek/mt7981.dbdc.b1.dat" > temp_insert.txt
        ## 将文本内容写入02_network
        sed -i '/mediatek_setup_macs()/,/\};/ {/cmcc,rax3000m-emmc)/ {n;n;n;r temp_insert.txt
        }}' target/linux/mediatek/mt7981/base-files/etc/board.d/02_network
        fi
        
    - name: 使用luci-app-mtk无线配置
      if: github.event.inputs.APP_MTK == 'true'
      run: |
        cd openwrt
        sed -i 's/CONFIG_PACKAGE_luci-app-mtwifi-cfg=y/CONFIG_PACKAGE_luci-app-mtk=y/g' .config
        sed -i 's/CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y/CONFIG_PACKAGE_luci-i18n-mtk-zh-cn=y/g' .config
        sed -i 's/CONFIG_PACKAGE_mtwifi-cfg=y/CONFIG_PACKAGE_wifi-profile=y/g' .config
        sed -i 's/CONFIG_PACKAGE_lua-cjson=y/CONFIG_WIFI_NORMAL_SETTING=y/g' .config
       
    - name: SSH远程连接服务器配置固件  SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载软件包  Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 开始编译固件  Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"

        sed -nE 's/.*(192.168\.[0-9]+\.[0-9]+).*/\1/p' package/base-files/files/bin/config_generate | head -n 1 > IP_ADDR
        [ -s IP_ADDR ] && echo "IP_ADDR=$(cat IP_ADDR)" >> $GITHUB_ENV

        grep '^CONFIG_TARGET_DEVICE.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

        if grep -q 'CONFIG_PACKAGE_mtwifi-cfg=y' .config; then
            echo "WIFI_INTERFACE=-mtwifi" >> $GITHUB_ENV
        else
            echo "WIFI_INTERFACE=" >> $GITHUB_ENV
        fi
        if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' .config; then
            echo "BUILD_DOCKERMAN=-docker" >> $GITHUB_ENV
        else
            echo "BUILD_DOCKERMAN=" >> $GITHUB_ENV
        fi
        echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 检查github储存空间情况  Check space usage
      if: (!cancelled())
      run: df -hT

    - name: 加载bin目录在github空间  Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件并重命名
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: | 
        mapfile -t devices < <(grep '^CONFIG_TARGET_DEVICE.*=y' openwrt/.config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        cd openwrt/bin/targets/*/*
        rm -rf packages
        sudo -E apt-get -qq install rename
        for val in "${devices[@]}"; do
          rename "s/.*${val}/${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${val}${{ env.WIFI_INTERFACE }}${{ env.BUILD_DOCKERMAN }}/" *
          echo "$val"
        done
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 打包上传固件到Actions Artifacts
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.WIFI_INTERFACE }}${{ env.BUILD_DOCKERMAN }}
        path: ${{ env.FIRMWARE }}

    - name: 上传固件到奶牛快传  Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: 加载固件到WeTransfer  Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: 生成固件Release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        touch release.txt
        echo "- 使用源码：${{ env.REPO_URL }}" >> release.txt
        echo "- 登录地址：${{ env.IP_ADDR }}" >> release.txt
        if [[ "${{ env.MAC_FIX }}" == '-MAC_fix' ]]; then
                echo "- 修改源码 使用原厂的MAC地址顺序" >> release.txt
        else
                echo "- 未修改源码中的MAC地址顺序" >> release.txt
        fi
        if [[ "${{ env.BUILD_DOCKERMAN }}" == '-docker' ]]; then
                echo "- 已编译luci-app-dockerman" >> release.txt
        else
                echo "- 未编译luci-app-dockerman" >> release.txt
        fi
        echo "release_tag=${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.WIFI_INTERFACE }}${{ env.BUILD_DOCKERMAN }}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 发布固件至Release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.WIFI_INTERFACE }}${{ env.BUILD_DOCKERMAN }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt

    # - name: 删除旧的工作流  Delete workflow runs
    #   uses: GitRML/delete-workflow-runs@main
    #   with:
    #     retain_days: 1
    #     keep_minimum_runs: 3

    # - name: 删除旧的发布版本  Remove old Releases
    #   uses: dev-drprasad/delete-older-releases@v0.1.0
    #   if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   with:
    #     keep_latest: 3
    #     delete_tags: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
